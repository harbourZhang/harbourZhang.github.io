{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"https://harbourzhang99.gitee.io/blog","root":"/blog/"},"pages":[],"posts":[{"title":"Hello World","slug":"hello-world2","date":"2020-11-07T12:17:45.835Z","updated":"2020-11-07T12:17:57.396Z","comments":true,"path":"2020/11/07/hello-world2/","link":"","permalink":"https://harbourzhang99.gitee.io/blog/2020/11/07/hello-world2/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post2221$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-11-07T12:15:22.908Z","updated":"2020-11-07T12:18:04.380Z","comments":true,"path":"2020/11/07/hello-world/","link":"","permalink":"https://harbourzhang99.gitee.io/blog/2020/11/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post111111&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"hiding","slug":"GuliMall","date":"2020-11-07T12:01:51.000Z","updated":"2020-11-07T12:36:13.866Z","comments":true,"path":"2020/11/07/GuliMall/","link":"","permalink":"https://harbourzhang99.gitee.io/blog/2020/11/07/GuliMall/","excerpt":"","text":"一、Spring Could Nacos 【注册中心】1. 下载地址：https://github.com/alibaba/nacos/releases 2. 启动（1） bin目录下 点击startup.cmd（2）配置依赖12345&lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt; &lt;version&gt;2.2.1.RELEASE&lt;/version&gt;&lt;/dependency&gt; （3）配置application.yml文件1234567spring: application: name: gulimall-member cloud: nacos: discovery: server-addr: 127.0.0.1:8848 （4）在主启动类上添加 @EnableDiscoveryClient 注解（5）启动主启动类。二、SpringCloud Feign微服务之间互相调用的一个声明式的Web Service客户端。当本服务想要调用外部服务时，使用feign来建立一个接口，本服务调用此接口，此接口再调用外部服务返回信息。 1. 使用步骤：（1）配置依赖1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;&lt;/dependency&gt; （2）告诉springcloud 使用Feign进行微服务之间的调用​ 创建 Feign 包，对应的微服务Service接口， 并添加@ FeignClient注解。 注意方法名最好一致 12345678910111213141516171819202122232425262728293031// 待调用服务的Controller @RequestMapping(&quot;coupon/coupon&quot;)public class CouponController &#123; @Autowired private CouponService couponService; @RequestMapping(&quot;/test&quot;) public R couponToMember() &#123; CouponEntity entity = new CouponEntity(); entity.setCouponName(&quot;测试使用-满100减50&quot;); return R.ok().put(&quot;coupon&quot;,entity); &#125;&#125;// Feign接口 @FeignClient(&quot;gulimall-coupon&quot;) // 如果要调用接口的这个方法，先从注册中心的这个微服务开始寻找public interface CouponFeignService &#123; @RequestMapping(&quot;/coupon/coupon/test&quot;) public R couponToMember();&#125;// 本服务的Controller @Resourceprivate CouponFeignService service;@RequestMapping(&quot;/test&quot;)public R couponToMember() &#123; R r = service.couponToMember(); return r;&#125; （3）在主启动类上添加 @EnableFeignClient 注解1@EnableFeignClients(basePackages = &quot;com.atguigu.gulimall.member.feign&quot;) 三、Nacos 作为配置中心1. 使用步骤：（1） 配置依赖：1234&lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;&lt;/dependency&gt; （2） 创建配置文件 bootstrap.properties, 并添加以下配置12spring.cloud.nacos.config.server-addr=127.0.0.1:8848spring.application.name=gulimall-member （3） 在Nacos服务中心创建【服务名.properties】配置文件12member.username=harbourmember.info=测试文件 （4）编写相关业务逻辑（5）在对应的Controller上添加@RefreshScope的注解1@RefreshScope 2. 环境隔离每个微服务创建自己的命名空间，使用配置分组区分环境，如dev，test，prod等 （1） 命名空间：默认public，用于在微服务之间进行配置隔离，每个微服务创建自己的命名空间，需要在bootstrap.properties加入以下配置： 1spring.cloud.nacos.config.namespace= 【Nacos中的命名空间ID】 （2） 配置集：所有配置的集合 （3） 配置集ID:Data-ID : 类似于配置文件名 （4）配置分组：需要在bootstrap.properties加入以下配置： 1spring.cloud.nacos.config.group= 【Nacos中的分组名】 3. 加载多配置文件在bootstrap.properties中，使用spring.cloud.nacos.config.ext-config配置配置文件。默认加载【文件名-properties】配置文件。 1234567891011spring.cloud.nacos.config.ext-config[0].data-id=mybatis.yamlspring.cloud.nacos.config.ext-config[0].group=devspring.cloud.nacos.config.ext-config[0].refresh=truespring.cloud.nacos.config.ext-config[1].data-id=datasource.yamlspring.cloud.nacos.config.ext-config[1].group=devspring.cloud.nacos.config.ext-config[1].refresh=truespring.cloud.nacos.config.ext-config[2].data-id=cloud.yamlspring.cloud.nacos.config.ext-config[2].group=devspring.cloud.nacos.config.ext-config[2].refresh=true 四、Spring Cloud Gateway1.使用步骤（1）导入依赖：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;&lt;/dependency&gt; （2）根据不同的需求，配置yaml12345678910111213141516171819spring: cloud: gateway: routes: - id: admin_route uri: lb://renren-fast predicates: - Path=/api/** filters: - RewritePath=/api/(?&lt;segment&gt;.*),/renren-fast/$\\&#123;segment&#125; nacos: discovery: server-addr: 127.0.0.1:8848 application: name: gulimall-gatewayserver: port: 88 (3) 修改主启动类在主启动类上增加@EnableDiscoveyClient 注解 五、解决浏览器跨域解决方案：12345678910111213141516@Configurationpublic class MyCorsConfiguration &#123; public CorsWebFilter getCorsWebFilter () &#123; UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(); CorsConfiguration configuration = new CorsConfiguration(); configuration.addAllowedHeader(&quot;*&quot;); configuration.addAllowedMethod(&quot;*&quot;); configuration.addAllowedOrigin(&quot;*&quot;); configuration.setAllowCredentials(true); source.registerCorsConfiguration(&quot;/**&quot;,configuration); return new CorsWebFilter(source); &#125;&#125; 六、整合MybatisPlus1.导入依赖123456789101112&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.3.1&lt;/version&gt;&lt;/dependency&gt;&lt;!-- 数据源 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.1.13&lt;/version&gt;&lt;/dependency&gt; 2. 配置（1）配置数据源12345678910# 配置mybatisplusmybatis-plus: # MyBatis Mapper 所对应的 XML 文件位置 # Maven 多模块项目的扫描路径需以 classpath*: 开头 （即加载多个 jar 包下的 XML 文件） mapper-locations: classpath*:/mapper/**/*.xml # 设置主键自增 global-config: db-config: id-type: auto （2）使用@MapperScan注解使用@MapperScan注解告诉MybatisPlus的sql映射位置 3.逻辑删除（1）配置yaml (注：since 3.3.0,配置后可以忽略不配置步骤2)123456mybatis-plus: global-config: db-config: logic-delete-field: flag # 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2) logic-delete-value: 1 # 逻辑已删除值(默认为 1) logic-not-delete-value: 0 # 逻辑未删除值(默认为 0) （2）实体类字段上加上@TableLogic注解12@TableLogicprivate Integer deleted;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://harbourzhang99.gitee.io/blog/tags/java/"},{"name":"spring cloud","slug":"spring-cloud","permalink":"https://harbourzhang99.gitee.io/blog/tags/spring-cloud/"}]}],"categories":[],"tags":[{"name":"java","slug":"java","permalink":"https://harbourzhang99.gitee.io/blog/tags/java/"},{"name":"spring cloud","slug":"spring-cloud","permalink":"https://harbourzhang99.gitee.io/blog/tags/spring-cloud/"}]}